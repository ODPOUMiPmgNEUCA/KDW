# -*- coding: utf-8 -*-
"""Soczyste rabaty.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1bfU5lwdNa2GOPWmQ9-URaf30VnlBzQC0
"""

#importowanie potrzebnych bibliotek
import os
import openpyxl
import streamlit as st
import pandas as pd
import numpy as np
import altair as alt
import plotly.express as px
import plotly.graph_objects as go
from urllib.request import urlopen
import json
import io
from datetime import datetime



st.set_page_config(page_title='Łączenie danych do kalendarza', layout='wide')



tabs_font_css = """
<style>
div[class*="stTextInput"] label {
  font-size: 26px;
  color: black;
}
div[class*="stSelectbox"] label {
  font-size: 26px;
  color: black;
}
</style>
"""

st.title("Automat KDW")



################### RAPORT PROMOCYJNY ####################
df_p = st.file_uploader(
    label = "Wrzuć plik RaportPromocyjny"
)
if df_p:
    df_p = pd.read_csv(df_p, sep=';')
    st.write(df_p.head())

# Wybieranie tylko określonych kolumn z DataFrame
kolumny_p = [
    'Id Materiału', 'identyfikator promocji', 'Nazwa Promocji', 'Nr zlecenia', 'Skład (SPR,SGL)', 'Rabat Promocyjny'
]

df_p = df_p[kolumny_p]
# Filtrowanie wierszy
df_p = df_p[
    (df_p['Nr zlecenia'] != 61114) &  # usuń wiersze z Nr zlecenia 61114
    (~df_p['Nazwa Promocji'].str.contains('BKS', na=False))  # usuń wiersze z 'BKS' w nazwie promocji
]
# Oczyszczanie kolumny 'Rabat Promocyjny'
df_p['Rabat Promocyjny'] = df_p['Rabat Promocyjny'].fillna(0)
df_p = df_p[df_p["Rabat Promocyjny"] != 0]
df_p['Rabat Promocyjny'] = df_p['Rabat Promocyjny'].str.replace(',', '.')  # Zastąp przecinki kropkami, jeśli są
df_p['Rabat Promocyjny'] = df_p['Rabat Promocyjny'].str.strip()  # Usuwanie białych znaków
# Konwersja na typ numeryczny (float), w przypadku problemów, zamienia wartości na NaN
df_p['Rabat Promocyjny'] = pd.to_numeric(df_p['Rabat Promocyjny'])
df_p['Rabat Promocyjny'] = df_p['Rabat Promocyjny'].abs()
df_p['Rabat Promocyjny'] = df_p['Rabat Promocyjny'] / 100
# Zaokrąglenie do 2 miejsc po przecinku (opcjonalnie)
df_p['Rabat Promocyjny'] = df_p['Rabat Promocyjny'].round(6)
df_p = df_p[df_p["Rabat Promocyjny"] != 0]



###################### ASORTYMENT NEUCA ########################
df_a = st.file_uploader(
    label = "Wrzuć plik Asortyment Neuca"
)
if df_a:
    df_a = pd.read_excel(df_a, sheet_name='Asortyment')
    st.write(df_a.head())

# Wybieranie tylko określonych kolumn z DataFrame
kolumny_a = [
    'Indeks kartoteki', 'Cena Neuca', 'EAN', 'BLOZ'
]

df_a = df_a[kolumny_a]


####################### WSADOWY #########################
df_file = st.file_uploader(
    label="Wrzuć plik wsadowy"
)

if df_file:
    # Wczytanie arkuszy
    df_oltarzew = pd.read_excel(df_file, sheet_name='Ołtarzew')
    df_total = pd.read_excel(df_file, sheet_name='Total')

    # Funkcja do dodania kolumn
    def przetworz_wsadowy(df_wsadowy, df_p, df_a):
        dzis = pd.to_datetime(datetime.today().date())
        
        # Kolumna 0-1 jeśli mniej niż 9 miesięcy
        df_wsadowy['Data ważności'] = pd.to_datetime(df_wsadowy['Data ważności'], errors='coerce')
        df_wsadowy['Data poniżej 9-ciu msc'] = df_wsadowy['Data ważności'].apply(
            lambda x: 1 if pd.notna(x) and (x - dzis).days <= 9*30 else 0
        )
        
        # Minimalny rabat z df_p
        # Upewniamy się, że typy są zgodne
        #df_wsadowy['Nr kartoteki'] = df_wsadowy['Nr kartoteki'].astype(str)
        #df_p['Id Materiału'] = df_p['Id Materiału'].astype(str)
        
        #df_p['Rabat Promocyjny'] = pd.to_numeric(df_p['Rabat Promocyjny'], errors='coerce')
        
        # Minimalny rabat z df_p

        df_p_max = df_p.groupby('Id Materiału')['Rabat Promocyjny'].max()
        df_wsadowy['Max rabat z wolnego'] = df_wsadowy['Nr kartoteki'].map(df_p_max)
        df_wsadowy['Max rabat z wolnego'] = df_wsadowy['Max rabat z wolnego'].fillna(0)  # jeśli brak dopasowania

        
        # Cena z oferty Neuca
        df_a_cena = df_a.set_index('Indeks kartoteki')['Cena Neuca']
        df_wsadowy['Cena Neuca'] = df_wsadowy['Nr kartoteki'].map(lambda x: df_a_cena.get(x, 0))

        # EAN z oferty Neuca
        df_a_ean = df_a.set_index('Indeks kartoteki')['EAN']
        df_wsadowy['EAN'] = df_wsadowy['Nr kartoteki'].map(lambda x: df_a_ean.get(x, np.nan))
        
        return df_wsadowy

    # Przetwarzamy oba arkusze
    df_oltarzew = przetworz_wsadowy(df_oltarzew, df_p, df_a)
    df_total = przetworz_wsadowy(df_total, df_p, df_a)
    
    st.write("Arkusz Ołtarzew po przetworzeniu:")
    st.write(df_oltarzew.head())
    
    st.write("Arkusz Total po przetworzeniu:")
    st.write(df_total.head())


    # --- Filtrujemy SKK ---
    df_oltarzew = df_oltarzew[df_oltarzew["Skład"] != "SKK"]
    df_total = df_total[df_total["Skład"] != "SKK"]
    
    # --- Ołtarzew 2 ---
    df_p_oltarzew = df_p[df_p['Id Materiału'].isin(df_oltarzew['Nr kartoteki'])].copy()
    df_oltarzew_rabaty = df_oltarzew[['numer_kartoteki', 'Rabat max']]
    df_p_oltarzew = df_p_oltarzew.merge(df_oltarzew_rabaty, on='Nr kartoteki', how='left')
    df_oltarzew_2 = df_p_oltarzew[df_p_oltarzew['Rabat Promocyjny'] == df_p_oltarzew['Rabat max']].copy()
    
    # --- Total 2 ---
    df_p_total = df_p[df_p['Id Materiału'].isin(df_total['Nr kartoteki'])].copy()
    df_total_rabaty = df_total[['numer_kartoteki', 'Rabat max']]
    df_p_total = df_p_total.merge(df_total_rabaty, on='Nr kartoteki', how='left')
    df_total_2 = df_p_total[df_p_total['Rabat Promocyjny'] == df_p_total['Rabat max']].copy()
    
    # --- Eksport do Excela ---
    if df_file:
        output = io.BytesIO()
        with pd.ExcelWriter(output, engine='openpyxl') as writer:
            # Zapis w kolejności
            df_oltarzew.to_excel(writer, sheet_name='Ołtarzew', index=False)
            df_total.to_excel(writer, sheet_name='Total', index=False)
            df_oltarzew_2.to_excel(writer, sheet_name='Ołtarzew 2', index=False)
            df_total_2.to_excel(writer, sheet_name='Total 2', index=False)
    
            # Formatowanie EAN jako tekst
            for sheet in ['Ołtarzew', 'Total', 'Ołtarzew 2', 'Total 2']:
                ws = writer.sheets[sheet]
                for col in ws.iter_cols():
                    if col[0].value and "ean" in str(col[0].value).lower():
                        for cell in col:
                            cell.number_format = "@"
    
        output.seek(0)
        st.download_button(
            label="Pobierz przetworzony plik Excel",
            data=output,
            file_name=f'przetworzony_kdw_{datetime.now().strftime("%Y%m%d")}.xlsx',
            mime='application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'
        )
